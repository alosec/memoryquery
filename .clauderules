# Simple Memory MCP - Project Rules

## Test Architecture Patterns

### Timestamp-Based Validation (PROVEN APPROACH)
- **Use timestamp comparison**: Compare latest JSONL vs database timestamps
- **No file modification**: Read-only tests that don't pollute conversation files
- **No polling loops**: Avoid timeout-based tests that take 10+ seconds
- **Reference implementation**: Based on working cafe-db-sync latency patterns

### Clean Test Design
- Tests should complete in seconds, not minutes
- Use deterministic measurements, not probabilistic polling
- Focus on real conversation data, not synthetic test files
- Test actual user value: "Can users access their Claude Code conversations?"

## Sync Daemon Debugging

### Known Working Components
- **Historical sync**: 66,684+ messages prove the sync engine works correctly
- **MCP server**: All 8 tools operational with existing data
- **Database operations**: Atomic transactions and schema working
- **File detection**: 493 conversation files found correctly

### ‚úÖ Resolved Issue - Path Resolution Bug Pattern
- **Root Cause**: Chokidar event handlers incorrectly concatenated already-absolute paths
- **Fix Pattern**: Remove `join(projectsPath, filePath)` - chokidar provides absolute paths
- **Result**: 125k+ second lag resolved to 6.8 seconds

### ‚úÖ Successful Debug Strategy
- **Path Debugging**: Added debug logging for chokidar event paths
- **Unified Sync**: Changed `ignoreInitial: false` for bootstrap+continuous sync
- **Event Handler Fix**: Removed double path concatenation in add/change/unlink handlers
- **Validation**: Timestamp-based testing confirmed fix effectiveness

## Development Patterns

### Architecture Priorities
1. **MCP Server**: Core product for conversation history access
2. **Sync Daemon**: Supporting component for real-time data freshness  
3. **CLI Tools**: Service management and health monitoring
4. **Installation**: Single-command setup (future priority)

### Testing Priorities
1. **Timestamp validation**: Primary health check methodology
2. **Real data focus**: Test actual Claude Code conversations
3. **System integration**: Validate end-to-end user workflows
4. **Error resilience**: Handle malformed files gracefully

### Code Quality
- Use TypeScript strictly (eliminate `any` types)
- Conventional commit format (feat:, fix:, docs:, etc.)
- Environment-based configuration with sensible defaults
- Transaction logging for debugging sync operations

## Current Status (August 9, 2025) - ‚úÖ MAJOR SUCCESS
- **Phase**: MCP TOOLS OPERATIONAL - Core functionality achieved
- **MCP Server**: All 8 tools working and returning real conversation data
- **Database Sync**: JSONL parsing fixed, content extraction operational
- **Achievement**: Memory MCP tools successfully providing conversation history access

## üéØ Strategic North Stars Progress (August 2025)

### ‚úÖ North Star 1: Project Path Parameter UX - COMPLETED
**Problem Solved**: Enhanced project path support with three intuitive input formats
**‚úÖ Implementation**: ProjectPathMapper utility handles all format conversions
**‚úÖ Success**: Users can now query using simple names, full paths, or encoded format
**‚úÖ Testing**: All three formats verified working with real project data

### ‚ö†Ô∏è North Star 2: "Masquerading" Problem - STRATEGIC DECISION PENDING
**Problem**: Tool results appear as "user" messages in Claude Code JSONL
**Pattern**: Assistant ‚Üí tool_use, System ‚Üí tool_result formatted as user message
**Impact**: Tool usage history queries return empty results

**Strategic Question**: Fix masquerading parsing OR restructure approach entirely?
- **Option A**: Implement enhanced parsing for tool result masquerading detection
- **Option B**: Focus on conversation context with integrated tool information
- **Uncertainty**: Value of standalone tool usage queries vs. conversational tool context

**References**: `/home/alex/code/cafe/cafe-db-sync/memory-bank/cc-jsonl.md`