# Simple Memory MCP - Project Rules

## Test Architecture Patterns

### Timestamp-Based Validation (PROVEN APPROACH)
- **Use timestamp comparison**: Compare latest JSONL vs database timestamps
- **No file modification**: Read-only tests that don't pollute conversation files
- **No polling loops**: Avoid timeout-based tests that take 10+ seconds
- **Reference implementation**: Based on working cafe-db-sync latency patterns

### Clean Test Design
- Tests should complete in seconds, not minutes
- Use deterministic measurements, not probabilistic polling
- Focus on real conversation data, not synthetic test files
- Test actual user value: "Can users access their Claude Code conversations?"

## Sync Daemon Debugging

### Known Working Components
- **Historical sync**: 66,684+ messages prove the sync engine works correctly
- **MCP server**: All 8 tools operational with existing data
- **Database operations**: Atomic transactions and schema working
- **File detection**: 493 conversation files found correctly

### ✅ Resolved Issue - Path Resolution Bug Pattern
- **Root Cause**: Chokidar event handlers incorrectly concatenated already-absolute paths
- **Fix Pattern**: Remove `join(projectsPath, filePath)` - chokidar provides absolute paths
- **Result**: 125k+ second lag resolved to 6.8 seconds

### ✅ Successful Debug Strategy
- **Path Debugging**: Added debug logging for chokidar event paths
- **Unified Sync**: Changed `ignoreInitial: false` for bootstrap+continuous sync
- **Event Handler Fix**: Removed double path concatenation in add/change/unlink handlers
- **Validation**: Timestamp-based testing confirmed fix effectiveness

## Development Patterns

### Architecture Priorities
1. **MCP Server**: Core product for conversation history access
2. **Sync Daemon**: Supporting component for real-time data freshness  
3. **CLI Tools**: Service management and health monitoring
4. **Installation**: Single-command setup (future priority)

### Testing Priorities
1. **Timestamp validation**: Primary health check methodology
2. **Real data focus**: Test actual Claude Code conversations
3. **System integration**: Validate end-to-end user workflows
4. **Error resilience**: Handle malformed files gracefully

### Code Quality
- Use TypeScript strictly (eliminate `any` types)
- Conventional commit format (feat:, fix:, docs:, etc.)
- Environment-based configuration with sensible defaults
- Transaction logging for debugging sync operations

## Current Status (August 9, 2025)
- **Phase**: CRITICAL - Real-time sync still broken, core file watcher issue unresolved
- **Test Suite**: Clean architecture shows sync lag 169+ seconds and increasing
- **Next**: Fix chokidar watcher going idle after initial sync - core monitoring failure